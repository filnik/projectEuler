#include<iostream>
using namespace std;

/*

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not exceed four million.
---------------------

Ogni nuovo termine nella sequenza di Fibonacci e' generato aggiungendo i due numeri precedenti. Iniziando da 1 e 2, i primi 10 termini saranno:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Trovare la somma di tutti i numeri pari della sequenza che non superano i 4 milioni.
*/

/*
PRE = (penultimo, valore int > 0, indica il penultimo numero per continuare la serie
	   ultimo, valore int > 0, indica l'ultimo numero
	   limMax, valore int > 0, indica il numero massimo che la serie non dve superare)
*/
int F(int penultimo, int ultimo, int limMax){
	int somma = 0;
	int prossimo = penultimo + ultimo;

	if (prossimo > limMax){
		if (ultimo % 2 == 0){
			somma = ultimo;
		}
		if (penultimo % 2 == 0){
			somma += penultimo;
		}
		return somma;
	}
	somma = F(ultimo, prossimo, limMax);
	if (penultimo % 2 == 0){
		somma += penultimo;
	}
	return somma;	
}
/*
POST = (La funzione ritorna "somma" che e' la somma di tutti i numeri della serie di Fibonacci divisibili per due da ultimo fino a limMax)

DIMOSTRAZIONE INDUTTIVA:
	Caso base:
		prossimo > limMax:
			Controlliamo se l'ultimo e il penultimo vanno aggiunti alla somma o meno, in caso positivo gli aggiungiamo e ritorniamo la somma.
			Pertanto, vale la POST. Ok.
	Invocazione ricorsiva:
		siamo sicuri che prossimo e' minore di limMax e passiamo ultimo e prossimo al posto di penultimo e di ultimo, cosa fattibile essendo
		entrambi valori int. LimMax rimane lo stesso, quindi invocazione corretta rispetto alla PRE, vale la POST.
	Caso induttivo:
		penultimo % 2 == 0:
			Se il penultimo e' pari, aggiungilo alla somma. Corretto rispetto alla POST.
	
	*/

int main(){
	int somma = F(1, 2, 4*1000*1000);
	cout << somma << endl;
	system("pause");
}
